* Ex027ListViewCustom
1. activity_main.xml 문서 : 최종으로 보여질 화면 구성
- ListView
2. Item 클래스의 레이아웃(뷰 모양)으로 쓰일 listview_item.xml 문서 작성
- 반복 나열될 layout 한칸 안의 구성요소 작성(각 뷰들에 id 부여)
- ImageView / TextView+TextView
3. Item.java 문서 : 대량의 데이터를 저장할 객체의 클래스 작성
4. MainActivity.java 문서 : ArrayList<Item> items 변수 및 해당 ArrayList 배열 객체 생성
- items 객체 안에 .add(Item 객체 생성문); --> Item 객체 생성과 동시에 데이터 입력 (name, nation, 이미지의 id(식별자))
- Item 클래스의 생성자 메소드에 의해 Item 객체 생성할 때마다 세 개의 데이터가 대입됨
- items 배열 요소 한칸한칸마다 Item 객체(name,nation,이미지id 데이터를 가진)가 존재

5. ★MyAdapter.java 문서 : 생성자 메소드 + MyAdapter가 상속받은 BaseAdapter의 추상메소드(자식 메소드에서 반드시 구현해야함) 4개에 운영체제(context) 기능과, items ArrayList. 배열 객체의 기능을 가지고 구현
0) 생성자 메소드
- 파라미터로 context와 items를 받아와 MyAdapter의 멤버변수 context, items에 대입
1) getCount() 메소드
- 리턴값만큼 뷰 생성 : items.size() 기능을 이용해 ArrayList<Item> 배열 길이만큼 뷰 생성됨
2) getItem() 메소드
- 파라미터 i의 자리에 있는 Item 객체를 리턴해줌
3) getItemId() 메소드
- items의 각 요소(Item 객체)가 클릭되었을 때 쓰일 id값을 설정하고자 할 때, 해당 객체의 position마다 id값을 부여하는 메소드 (보통 position = i 이므로 return i; 가 고정임)
4) getView() 메소드
- 재활용할 뷰가 없는지 확인 : if문-view==null일 경우 listview_item으로 뷰를 만듦(inflater 객체 사용)
  **Inflater 객체는 xml 문서를 부풀려 뷰 객체로 만들어주는 역할!
  [ 만약 재활용할 뷰가 있었으면, view 변수에 해당 뷰를 참조해뒀어야함! 따로 view= ~~~; << 실행문이 없었으면 null값임 ]
- 만들어진 View 객체 안에 데이터를 연결해주는 작업 : listview_item.xml 문서의 뷰들에 부여된 id를 호출하려면, 해당 뷰를 가지고 있는 객체를 통해 호출해야함! 여기서는 파라미터에 view가 들어와있으므로 이를 활용.
  **파라미터로 받은 view 는 ArrayList<Item> 배열의 요소값인 각각의 Item 객체 데이터가 들어있는 뷰!
- Item 객체의 위치값을 받아와 setImageResource(), setText().
- view 반환